Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2016-11-11T15:54:14+08:00

====== Porting Load Simulator to Epoxy ======
Created Friday 11 November 2016

===== Description =====
To integrate Load Simulator application into Epoxy. The Load Simulator becomes a sub-app of Epoxy and will no longer be accessible directly from web browser.
The Load Simulator itself still runs on its own instance, but accessible through Epoxy.

===== General Requirements =====
* Load Simulator (LS) GUI has to be migrated to Epoxy, probably will need to be re-designed.
	* migrate all the js and mustache files
	* New design:
		* color scheme and layout follows Epoxy (side bars and headers)
		* Top menu links on LS should be changed to Tabs
* The backend of LS is accessed via REST API
	* Need to see if there is already REST API endpoints between LS GUI and Backend
	* If no REST interface in LS, then need to create it and make pull request to Mintdata
	* Need new REST endpoint in Epoxy to access LS
* Epoxy must be able to do the following:
	* track/log the activities on LS
	* takeover the responsibilities of:
		* Profile creation ===> ported from LS
		* Monitoring ===> ported from LS
	* control the access to LS
		* via configuration (mechanism already exists) ===> probably falls under which admin accounts can use it or not
		* if disabled, then user cannot see the link or access it directly via command line
* Database
	* LS uses Mysql for profiles, and Cassandra for the rest
	* May be needed to migrate everything to Cassandra

===== Internal requirements =====
* Write more tests


===== Plan =====
[ ] Familiarize with LS codes
	[ ] Add unit tests (but don't need to create Pull Request)
	[ ] Understand how UI communicates with backend (see if REST is used, if not need to create)
	[ ] Separate frontend from backend
		[ ] will port frontend with UI to Epoxy
		[ ] backend will include a REST listener
[ ] Familiarize with Epoxy codes
	[ ] Add unit tests for understanding
		[ ] Junit
		[ ] Angular unit test
		[ ] E2E?
[ ] Migrate features (just the front-end service, making REST requests to LS backend):
	[ ] Port LS UI to Epoxy, need to convert ExpressJs+Mustache to AngularJS+HTML
		[ ] Conversion is the long-term goal
		[ ] Short-term: make the t
	[ ] simulation creation
	[ ] profile creation
	[ ] monitoring
	[ ] logging
	[ ] access control

===== Side plan â€” improvement ideas =====
[ ] Refactor the codes where
	[ ] there are big methods
	[ ] there are lots of nested ifs and loops
	[ ] JSON: instead of JSONObject/JSONArray, let's use Jackson and convert JSON string to custom object
	[ ] unit tests are required before making any change
	[ ] Use dependency injection to improve testability
	[ ] Use mocking framework eg Mockito
	[ ] Set up unit tests
		[ ] use Junit
		[ ] set up job/runner in pom.xml
		[ ] refactor the codes to make it testable
			[ ] small increment at a time
	[ ] Set up a code review server
		[ ] run CodeBrag

