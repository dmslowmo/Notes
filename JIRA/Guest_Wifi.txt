Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2016-04-25T12:04:40+08:00

====== Guest Wifi ======
Created Monday 25 April 2016


===== Links =====
Main page: https://greenwavesystems.atlassian.net/wiki/display/RQBHR2X/Guest+WiFi

Tasks:
https://greenwavesystems.atlassian.net/browse/SB-168
https://greenwavesystems.atlassian.net/browse/SB-169

Requirement review:
https://docs.google.com/spreadsheets/d/1zQa-ZxQg1kQY2_J0K255XrYuFuFJfSr6N3aNaz0rxo4/edit#gid=0


===== Code Review =====
* GuestSecureNetworkSsm contains the configuration of the Guest secure network
* GuestSecureNetworkSsm is instantiated during the creation of FeatBHR4::FeatureSsms
	* where the maxTotalNoAssociatedDevices is set to default 10
* This Ssm is needed in the creation of the following modules:
	* DhcpServer
	* GuestBl
	* RestApi (taken from FeatureSsms
	* Tr69Bl
* Guest Wifi feature is incomplete:
	* Splash page is not displayed
	* GDT shows guest_network as "off" even when it is enabled via BHR4 UI
* For non-secured Guest network, GuessNetworkSsm is used
	* see guest_wifi_bl.cpp
* GuestWifiBl class
	* Wraps the Guest Wifi business logic
	* How "business logic" class is used:
		* It wraps a behaviour which is executed implicitly
			* eg. provides a function which is a callback to be executed when something changes
		* function //mapIfChanges()// is a callback
			* called when any of the observables changes (GuestNetworkSsm, GuestSecureNetworkSsm, NetWifiBssSsm, NetWifiBssSsm)
			* via DecoupledValueSlot mapper
		* so we never have to or should not explicitely call business logic function (IMHO)
			* eg. bl.doSomething()
		* When business logic class is constructed
			* Ssm and Slot connections are established at construction
			* including binding the callback to the business logic's function
			* from then on, any changes to the observable will automatically causes the callback to be executed via Slot object
* Callback in Slot object defines the actions that need to happen when the observable Values change
* Callbacks are executed via coroutine
	* which needs to be scheduled to run (may not execute immediately, depending on schedule)
	* schedulling is adding the coroutine to a CoroutinePool to be executed later
* Other business logic classes:
	* GuestBl:
		* managing the IP assignment for guests
	* GuestBridgeBl
		* managing bridge interfaces for guests
	* GuestPassBl
		* manages generation of guest passes ie addition and removal
	* etc
