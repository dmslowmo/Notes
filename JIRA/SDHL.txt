Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2016-05-05T15:34:04+08:00

====== SDHL ======
Created Thursday 05 May 2016

===== SDHL Java Application =====
* SDHL-1.4.9 (in BHR5), in BHR4 may be different
* Java classes:
	* Monitor: add/remove/executes Action
	* Action: action to be performed (based on rules)
* JSON rules:
	* Each rule has a JSON schema
	* The rules includes, ID, parameter list, status, calculation, limit/threshold, etc
* C++ in lego:
	* SdhlSSM: contains all the RuleActions and WallGarden settings
	* SDHL EC components:
		* in lego/proprietary/ec_components/sdhl_app/
		* will compile into a sdhl_app library
		* needs java_app_launcher module
		* sdhl_app communicates with the Java SDHL app to control it
		* messages are sent via UDS (?) socket
			* io_message_output_queue.cpp
		* if any rule (condition) is met, message with value changes:
			* sent from Java App to sdhl_app library
			* message captured in sdhl_connection_handler.cpp
			* handle the message in sdhl_rule_action_handler.cpp
			* Updates TR69 params
	* WalledGarden
		* Used for ParentalControl
		* Triggered from SDHL Engine (Java app) which sends the request via REST API to BHR process
		* It is separate from the rule action where SDHL Engine updates TR69 parameter in BHR
		* ParentalControl will update iptables with the rules (eg block certain site)

===== How Rule is Processed =====
* BHR process sends new Rule to SDHL Engine (JAVA)
* SDHL Engine receives the rule and add it to a list
* A thread will loop through the list to periodically perform calculation and compare the results with the threshold. The frequency and the threshold values are specified in the Rule.
* If a threshold is hit/surpassed, an Action is triggered.
	* A POST message will be sent to notify BHR process
	* BHR process will send a response (?)
	* SDHL Engine will send the Action to be performed (WanReset, WalledGarden, logging, etc) to BHR
* In BHR, there is a REST API handler for every request type, and they are contained in a list of ApiHandler
* The REST request in buffered in a list, and the ApiHandler will loop this list to process the requests.
* Eg. WanReset:
	* WanReset handler will disable and then enable the wanIf

===== Understand Walled Garden =====
* How to add a rule
* How to execute rule's action
* How REST API request is made
* how to update the firewall based on the performed action
* how to redirect the HTTP request
* how to display a new webpage (redirected)

===== Customer Notification - WAN Link Down =====
* New rule for WAN Link Down
* Action:
	* Interface reset
	* redirect to a Walled Garden page
* Walled Garden page:
	* 3 unique Web pages for Walled Garden functionality
	* Locations to be created as TR69 variables including Webpage filename which can be invoked from SDHL
	* Web pages need to be remotely capable of being updated via TR69 sending the appropriate HTML code
	* Web page has the following functions:
		* Button to reboot Router
		* Button to reset WAN connection
		* Toggle Switch to allow clearing of Walled Garden
		* Link to URL to access UI (router mgmnt page)
		* The HTML code will be a subset of the whole page, sent via TR69 parameters
	* Need changes in REST API
* Needs "WANLinkMonitorSSM" (or existing one) and business logic

===== Customer Notification - WAN Unable to Rout =====
* New rule for WAN Unable to Rout
* Action:
	* DHCP release/renew
	* redirect to a Walled Garden page
* Walled Garden page:
	* similar to WAN link down
	* Need changes in REST API
* Shares the “WANLinkMonitorSSM” (or existing one) and business logic with WAN Link Down
	* If link is down, then unable to rout → WAN Link Down rule and action is performed
	* If link is up, test whether it is able to rout → WAN Unable to Rout rule and action is performed

