Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2016-05-05T15:34:04+08:00

====== SDHL ======
Created Thursday 05 May 2016

Sources:
https://support.greenwavereality.com/projects/gwr-embedded/wiki/SDHL
https://cto-wiki.greenwavereality.com/index.php/BHR4_Overview

docs:
https://docs.google.com/document/d/1dtucj4VNN0rJVW8BfXQemPVD1g0VSJjzRN8bt6GjJp8/edit
https://docs.google.com/document/d/1CyfO-Z51jM2IDH3vK_JZDBlVFpRsj4KVln_hH7dN5NY/edit

===== SDHL jars in lego =====
* It is downloaded into output/dl directory as sdhl-x.x.x.tar.gz archive
* you can execute //tar -tzvf sdhl-x.x.x.tar.gz// to list the content of the archive, eg:
{{{code: lang="sh" linenumbers="True"
drwxrwxr-x jenkins/jenkins   0 2016-03-31 17:57 sdhl-1.4.9/
drwxrwxr-x jenkins/jenkins   0 2016-03-31 17:57 sdhl-1.4.9/lib/
-rwxrwxr-x jenkins/jenkins 32119 2016-03-31 17:57 sdhl-1.4.9/lib/slf4j-api-1.7.10.jar
-rw-rw-r-- jenkins/jenkins 16046 2016-03-31 17:57 sdhl-1.4.9/lib/json_simple-1.1.jar
-rwxrwxr-x jenkins/jenkins  7895 2016-03-31 17:57 sdhl-1.4.9/lib/slf4j-jdk14-1.7.10.jar
-rwxrwxr-x jenkins/jenkins   232 2016-03-31 17:57 sdhl-1.4.9/run.sh
-rw-rw-r-- jenkins/jenkins 18907 2016-03-31 17:57 sdhl-1.4.9/sdhlRules.json
-rw-rw-r-- jenkins/jenkins 200882 2016-03-31 17:57 sdhl-1.4.9/selfHealing.jar
-rw-rw-r-- jenkins/jenkins   1907 2016-03-31 17:57 sdhl-1.4.9/sdhlConfig.properties
-rw-rw-r-- jenkins/jenkins   1709 2016-03-31 17:57 sdhl-1.4.9/logging.properties
}}}


===== Build and run SDHL from the repository on the BHR4, =====
* Go to sdhl/SelfHealing
* Run ant to build and run the unittest
* Go to sdhl/SelfHealing/bhr4deployment
* Run package.sh sdhl-{Version}
	* Set the version to something newer than the current BHR4 setup.
	* Copy the sdhl-{Version}.tgz to the dl directory in your lego repository if it is not located at ../../lego/dl (The package.sh will copy to this path)
* Go to lego/thirdparty/sdhl
* Update the Makefile version to the new version you specified in {Version}
* Run make once and update the hashes.mk with the string provided by the error from the make command
* Run the BHR4 build to build the BHR4 image.

===== SDHL Engine (JAVA) and SDHL Application (part of BHR) =====
* Java classes:
	* Monitor: add/remove/executes Action
	* Action: action to be performed (based on rules)
* JSON rules:
	* Each rule has a JSON schema
	* The rules includes, ID, parameter list, status, calculation, limit/threshold, etc
* C++ in lego:
	* SdhlSSM: contains all the RuleActions and WallGarden settings
	* SDHL EC components:
		* in lego/proprietary/ec_components/sdhl_app/
		* will compile into a sdhl_app library
		* needs java_app_launcher module
		* sdhl_app communicates with the Java SDHL app to control it
		* messages are sent via UDS (?) socket
			* io_message_output_queue.cpp
		* if any rule (condition) is met, message with value changes:
			* sent from Java App to sdhl_app library
			* message captured in sdhl_connection_handler.cpp
			* handle the message in sdhl_rule_action_handler.cpp
			* Updates TR69 params
	* WalledGarden
		* Used for ParentalControl
		* Triggered from SDHL Engine (Java app) which sends the request via REST API to BHR process
		* It is separate from the rule action where SDHL Engine updates TR69 parameter in BHR
		* ParentalControl will update iptables with the rules (eg block certain site)

===== How Rule is Processed =====
* BHR process sends new Rule to SDHL Engine (JAVA)
* SDHL Engine receives the rule and add it to a list
* A thread will loop through the list of parameters to monitor to periodically (every 1 minute, I think):
	* poll BHR for current TR69 parameters value via UDS socket communication
		* the response from BHR is in JSON format
		* if the polling period is not reached yet, the parameter is skipped
	* execute rules (see **DataStoreMonitorRuleManager.java**):
		* store this response from BHR
			* NOTE: the code is badly written, logic to store the data is embedded inside "getXXX" methods, making it hard to understand
			* See **RawResponseMap.java**
			* The data stored will be used for calculation
		* perform calculation and compare the results with the threshold.
			* The frequency and the threshold values are specified in the Rule.
* If a threshold is hit/surpassed, an Action is triggered.
	* SDHL Engine will send POST message via REST API on the Action to be performed (WanReset, WalledGarden, logging, etc) to BHR
* In BHR (c++), there is a REST API handler for every request type, and they are contained in a list of ApiHandler
* The REST request in buffered in a list, and the ApiHandler will loop this list to process the requests.
* Eg. WanReset:
	* WanReset handler will disable and then enable the wanIf

==== Experimenting with Rules ====
* use the JSON editor in //sdhl/tools/editor//
* run //firefox index.html//
* On the Firefox browser, you can use the editor to create/edit JSON schema of a rule
* the new rule schema can be copy-pasted to the rule's schema in GDT under //sdhl/rules/rulexx/rule//

===== How Calculation is Performed =====
* Calculation is only relevant to one extension of RuleAbst ie. DataStoreMonitorRuleManager
* performCalculations() is called from the override of executeRules() in DataStoreMonitorRuleManager
* performCalculations() iterate over a list of calculations to perform in dataStoreToMonitor list.
	* //isItTimeToPerformCalculation(ruleID, config, calcConfig)// checks if the set time has elapsed to perform the calculation
	* otherwise, the calculation is skipped for now
	* //doCalculate()// performs the actual calculation, using the Equation that was set when the Rule was added
		* Equation's variables are updated and the equation evaluated based on the operator found in the //postfix// of the string input
		* eg. "*", "/", "_", "-", "^", and "%"
		* Expression, which is in //infix// format, is first converted to its //Reverse Polish Notation// equivalent
		* Then, calculation is performed with help of operand and operator stacks.
* Each of the calculation is performed and the result is set into the parameter of //CalculatedValue// object



